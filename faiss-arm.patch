diff --git a/faiss/impl/ScalarQuantizer.cpp b/faiss/impl/ScalarQuantizer.cpp
index 07d77d56..84f51ee9 100644
--- a/faiss/impl/ScalarQuantizer.cpp
+++ b/faiss/impl/ScalarQuantizer.cpp
@@ -92,7 +92,7 @@ struct Codec8bit {
     }
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
     static FAISS_ALWAYS_INLINE float32x4x2_t
     decode_8_components(const uint8_t* code, int i) {
         float32_t result[8] = {};
@@ -144,7 +144,7 @@ struct Codec4bit {
     }
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
     static FAISS_ALWAYS_INLINE float32x4x2_t
     decode_8_components(const uint8_t* code, int i) {
         float32_t result[8] = {};
@@ -257,7 +257,7 @@ struct Codec6bit {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
     static FAISS_ALWAYS_INLINE float32x4x2_t
     decode_8_components(const uint8_t* code, int i) {
         float32_t result[8] = {};
@@ -335,7 +335,7 @@ struct QuantizerTemplate<Codec, true, 8> : QuantizerTemplate<Codec, true, 1> {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 
 template <class Codec>
 struct QuantizerTemplate<Codec, true, 8> : QuantizerTemplate<Codec, true, 1> {
@@ -417,7 +417,7 @@ struct QuantizerTemplate<Codec, false, 8> : QuantizerTemplate<Codec, false, 1> {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 
 template <class Codec>
 struct QuantizerTemplate<Codec, false, 8> : QuantizerTemplate<Codec, false, 1> {
@@ -487,7 +487,7 @@ struct QuantizerFP16<8> : QuantizerFP16<1> {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 
 template <>
 struct QuantizerFP16<8> : QuantizerFP16<1> {
@@ -553,7 +553,7 @@ struct Quantizer8bitDirect<8> : Quantizer8bitDirect<1> {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 
 template <>
 struct Quantizer8bitDirect<8> : Quantizer8bitDirect<1> {
@@ -857,7 +857,7 @@ struct SimilarityL2<8> {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 template <>
 struct SimilarityL2<8> {
     static constexpr int simdwidth = 8;
@@ -983,7 +983,7 @@ struct SimilarityIP<8> {
 };
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 
 template <>
 struct SimilarityIP<8> {
@@ -1135,7 +1135,7 @@ struct DCTemplate<Quantizer, Similarity, 8> : SQDistanceComputer {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 
 template <class Quantizer, class Similarity>
 struct DCTemplate<Quantizer, Similarity, 8> : SQDistanceComputer {
@@ -1298,7 +1298,7 @@ struct DistanceComputerByte<Similarity, 8> : SQDistanceComputer {
 
 #endif
 
-#ifdef __aarch64__
+#if defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 
 template <class Similarity>
 struct DistanceComputerByte<Similarity, 8> : SQDistanceComputer {
@@ -1482,7 +1482,8 @@ void ScalarQuantizer::train(size_t n, const float* x) {
 }
 
 ScalarQuantizer::SQuantizer* ScalarQuantizer::select_quantizer() const {
-#if defined(USE_F16C) || defined(__aarch64__)
+#if defined(USE_F16C) || \
+        (defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8))
     if (d % 8 == 0) {
         return select_quantizer_1<8>(qtype, d, trained);
     } else
@@ -1513,7 +1514,8 @@ void ScalarQuantizer::decode(const uint8_t* codes, float* x, size_t n) const {
 SQDistanceComputer* ScalarQuantizer::get_distance_computer(
         MetricType metric) const {
     FAISS_THROW_IF_NOT(metric == METRIC_L2 || metric == METRIC_INNER_PRODUCT);
-#if defined(USE_F16C) || defined(__aarch64__)
+#if defined(USE_F16C) || \
+        (defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8))
     if (d % 8 == 0) {
         if (metric == METRIC_L2) {
             return select_distance_computer<SimilarityL2<8>>(qtype, d, trained);
@@ -1849,7 +1851,8 @@ InvertedListScanner* ScalarQuantizer::select_InvertedListScanner(
         bool store_pairs,
         const IDSelector* sel,
         bool by_residual) const {
-#if defined(USE_F16C) || defined(__aarch64__)
+#if defined(USE_F16C) || \
+        (defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8))
     if (d % 8 == 0) {
         return sel0_InvertedListScanner<8>(
                 mt, this, quantizer, store_pairs, sel, by_residual);
diff --git a/faiss/utils/fp16.h b/faiss/utils/fp16.h
index 43e05dc3..3db64752 100644
--- a/faiss/utils/fp16.h
+++ b/faiss/utils/fp16.h
@@ -13,7 +13,7 @@
 
 #if defined(__F16C__)
 #include <faiss/utils/fp16-fp16c.h>
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) && (!defined(__GNUC__) || __GNUC__ >= 8)
 #include <faiss/utils/fp16-arm.h>
 #else
 #include <faiss/utils/fp16-inl.h>
